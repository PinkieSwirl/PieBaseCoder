package eu.pieland.base128

import eu.pieland.base128.Base128Encoder.Companion.ENCODER


internal open class Base128Decoder(
    protected var full8To7Mappings: Int = 0,
    protected var remainder: Int = 0,
    protected var src: ByteArray = byteArrayOf(),
    protected var srcOffset: Int = 0,
    protected var dst: ByteArray = byteArrayOf(),
) {
    protected var dstOffset = 0

    private var bits = 0L

    fun decode(): ByteArray {
        repeat(full8To7Mappings) { repeat(7) { dst[dstOffset++] = decodeByte(6 - it) } }
        repeat(remainder - 1) { dst[dstOffset++] = decodeByte(6 - it) }
        return dst
    }

    protected fun decodeByte(index: Int): Byte {
        if (index == 6) {
            bits = DECODER[src[srcOffset++].toUInt()] shl (7 * 7)
        }
        bits = bits or (DECODER[src[srcOffset++].toUInt()] shl 7 * index)

        return ((bits ushr (index * 8)) and 0xFF).toByte()
    }

    companion object {
        /**
         * This array is used to perform decoding the set of characters to its initial state of arbitrary bytes.
         * Thus, it depends on the [ENCODER] array.
         *
         * If you changed the [ENCODER] array you can compute the values of this one with the following code:
         *
         *      val array = LongArray(256, {0xFF}).apply {
         *          ENCODER.forEachIndexed {
         *              index, element -> this[element] = index.toLong() }
         *      }
         */
        @Suppress("MagicNumber")
        internal val DECODER: LongArray = longArrayOf(
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0x44, 0xFF, 0x54, 0x53, 0x52, 0x48, 0xFF, 0x4B, 0x4C, 0x46, 0x41, 0x55, 0x3F, 0x3E, 0x45,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x40, 0x56, 0x49, 0x42, 0x4A, 0x47,
            0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
            0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x4D, 0xFF, 0x4E, 0x43, 0x57,
            0x58, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
            0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x4F, 0x59, 0x50, 0x5A, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A,
            0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
            0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        )

        @Suppress("MagicNumber")
        internal val REMAINDER_MAPPING = intArrayOf(0, 0, 1, 2, 3, 4, 5, 6)

        fun decode(source: ByteArray, sourceOffset: Int, sourceSize: Int): ByteArray {
            if (sourceSize == 0) return byteArrayOf()

            val full8To7Mappings = sourceSize / 8
            val remainder = sourceSize % 8
            val destinationSize = full8To7Mappings * 7 + REMAINDER_MAPPING[remainder]

            return Base128Decoder(
                full8To7Mappings,
                remainder,
                source,
                sourceOffset,
                ByteArray(destinationSize),
            ).decode()
        }
    }
}